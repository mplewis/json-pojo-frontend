{"Container.java": "import java.util.HashMap;\nimport java.util.Map;\nimport javax.annotation.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Generated(\"org.jsonschema2pojo\")\n@JsonPropertyOrder({\n    \"name\",\n    \"running\"\n})\npublic class Container {\n\n    @JsonProperty(\"name\")\n    private String name;\n    @JsonProperty(\"running\")\n    private Boolean running;\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    /**\n     * \n     * @return\n     *     The name\n     */\n    @JsonProperty(\"name\")\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * \n     * @param name\n     *     The name\n     */\n    @JsonProperty(\"name\")\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * \n     * @return\n     *     The running\n     */\n    @JsonProperty(\"running\")\n    public Boolean getRunning() {\n        return running;\n    }\n\n    /**\n     * \n     * @param running\n     *     The running\n     */\n    @JsonProperty(\"running\")\n    public void setRunning(Boolean running) {\n        this.running = running;\n    }\n\n    @Override\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter\n    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder().append(name).append(running).append(additionalProperties).toHashCode();\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof Container) == false) {\n            return false;\n        }\n        Container rhs = ((Container) other);\n        return new EqualsBuilder().append(name, rhs.name).append(running, rhs.running).append(additionalProperties, rhs.additionalProperties).isEquals();\n    }\n\n}\n","RootJsonClass.java": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.annotation.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Generated(\"org.jsonschema2pojo\")\n@JsonPropertyOrder({\n    \"name\",\n    \"containers\"\n})\npublic class RootJsonClass {\n\n    @JsonProperty(\"name\")\n    private String name;\n    @JsonProperty(\"containers\")\n    private List<Container> containers = new ArrayList<Container>();\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    /**\n     * \n     * @return\n     *     The name\n     */\n    @JsonProperty(\"name\")\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * \n     * @param name\n     *     The name\n     */\n    @JsonProperty(\"name\")\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * \n     * @return\n     *     The containers\n     */\n    @JsonProperty(\"containers\")\n    public List<Container> getContainers() {\n        return containers;\n    }\n\n    /**\n     * \n     * @param containers\n     *     The containers\n     */\n    @JsonProperty(\"containers\")\n    public void setContainers(List<Container> containers) {\n        this.containers = containers;\n    }\n\n    @Override\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter\n    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder().append(name).append(containers).append(additionalProperties).toHashCode();\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof RootJsonClass) == false) {\n            return false;\n        }\n        RootJsonClass rhs = ((RootJsonClass) other);\n        return new EqualsBuilder().append(name, rhs.name).append(containers, rhs.containers).append(additionalProperties, rhs.additionalProperties).isEquals();\n    }\n\n}\n"}